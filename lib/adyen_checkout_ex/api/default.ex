# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule AdyenCheckoutEx.Api.Default do
  @moduledoc """
  API calls for all endpoints tagged `Default`.
  """

  alias AdyenCheckoutEx.Connection
  import AdyenCheckoutEx.RequestBuilder


  @doc """
  Retrieve a payment link.
  Retrieves the payment link details using the payment link `id`.

  ## Parameters

  - connection (AdyenCheckoutEx.Connection): Connection to server
  - link_id (String.t): Unique identifier of the payment link.
  - opts (KeywordList): [optional] Optional parameters
    - :idempotency_key (String.t): A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
  ## Returns

  {:ok, AdyenCheckoutEx.Model.PaymentLinkResource.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_payment_links_link_id(Tesla.Env.client, String.t, keyword()) :: {:ok, AdyenCheckoutEx.Model.ServiceError.t} | {:ok, AdyenCheckoutEx.Model.PaymentLinkResource.t} | {:error, Tesla.Env.t}
  def get_payment_links_link_id(connection, link_id, opts \\ []) do
    optional_params = %{
      :"Idempotency-Key" => :headers
    }
    %{}
    |> method(:get)
    |> url("/paymentLinks/#{link_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenCheckoutEx.Model.PaymentLinkResource{}},
      { 400, %AdyenCheckoutEx.Model.ServiceError{}},
      { 401, %AdyenCheckoutEx.Model.ServiceError{}},
      { 403, %AdyenCheckoutEx.Model.ServiceError{}},
      { 422, %AdyenCheckoutEx.Model.ServiceError{}},
      { 500, %AdyenCheckoutEx.Model.ServiceError{}}
    ])
  end

  @doc """
  Update the status of a payment link
  Updates the status of a payment link. Use this endpoint to [force the expiry of a payment link](https://docs.adyen.com/online-payments/pay-by-link#update-payment-link-status).

  ## Parameters

  - connection (AdyenCheckoutEx.Connection): Connection to server
  - link_id (String.t): Unique identifier of the payment link.
  - opts (KeywordList): [optional] Optional parameters
    - :idempotency_key (String.t): A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    - :body (UpdatePaymentLinkRequest): 
  ## Returns

  {:ok, AdyenCheckoutEx.Model.PaymentLinkResource.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec patch_payment_links_link_id(Tesla.Env.client, String.t, keyword()) :: {:ok, AdyenCheckoutEx.Model.ServiceError.t} | {:ok, AdyenCheckoutEx.Model.PaymentLinkResource.t} | {:error, Tesla.Env.t}
  def patch_payment_links_link_id(connection, link_id, opts \\ []) do
    optional_params = %{
      :"Idempotency-Key" => :headers,
      :body => :body
    }
    %{}
    |> method(:patch)
    |> url("/paymentLinks/#{link_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenCheckoutEx.Model.PaymentLinkResource{}},
      { 400, %AdyenCheckoutEx.Model.ServiceError{}},
      { 401, %AdyenCheckoutEx.Model.ServiceError{}},
      { 403, %AdyenCheckoutEx.Model.ServiceError{}},
      { 422, %AdyenCheckoutEx.Model.ServiceError{}},
      { 500, %AdyenCheckoutEx.Model.ServiceError{}}
    ])
  end

  @doc """
  Creates an order for the given amount.
  Creates an order to be used for partial payments. Make a POST `/orders` call before making a `/payments` call when processing payments with different payment methods.

  ## Parameters

  - connection (AdyenCheckoutEx.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :idempotency_key (String.t): A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    - :body (CheckoutCreateOrderRequest): 
  ## Returns

  {:ok, AdyenCheckoutEx.Model.CheckoutCreateOrderResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_orders(Tesla.Env.client, keyword()) :: {:ok, AdyenCheckoutEx.Model.ServiceError.t} | {:ok, AdyenCheckoutEx.Model.CheckoutCreateOrderResponse.t} | {:error, Tesla.Env.t}
  def post_orders(connection, opts \\ []) do
    optional_params = %{
      :"Idempotency-Key" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/orders")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenCheckoutEx.Model.CheckoutCreateOrderResponse{}},
      { 400, %AdyenCheckoutEx.Model.ServiceError{}},
      { 401, %AdyenCheckoutEx.Model.ServiceError{}},
      { 403, %AdyenCheckoutEx.Model.ServiceError{}},
      { 422, %AdyenCheckoutEx.Model.ServiceError{}},
      { 500, %AdyenCheckoutEx.Model.ServiceError{}}
    ])
  end

  @doc """
  Cancels the given order.
  Cancels an order. Cancellation of an order results in an automatic rollback of all payments made in the order, either by canceling or refunding the payment, depending on the type of payment method.

  ## Parameters

  - connection (AdyenCheckoutEx.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :idempotency_key (String.t): A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    - :body (CheckoutCancelOrderRequest): 
  ## Returns

  {:ok, AdyenCheckoutEx.Model.CheckoutCancelOrderResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_orders_cancel(Tesla.Env.client, keyword()) :: {:ok, AdyenCheckoutEx.Model.ServiceError.t} | {:ok, AdyenCheckoutEx.Model.CheckoutCancelOrderResponse.t} | {:error, Tesla.Env.t}
  def post_orders_cancel(connection, opts \\ []) do
    optional_params = %{
      :"Idempotency-Key" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/orders/cancel")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenCheckoutEx.Model.CheckoutCancelOrderResponse{}},
      { 400, %AdyenCheckoutEx.Model.ServiceError{}},
      { 401, %AdyenCheckoutEx.Model.ServiceError{}},
      { 403, %AdyenCheckoutEx.Model.ServiceError{}},
      { 422, %AdyenCheckoutEx.Model.ServiceError{}},
      { 500, %AdyenCheckoutEx.Model.ServiceError{}}
    ])
  end

  @doc """
  Create originKey values for one or more merchant domains.
  This operation takes the origin domains and returns a JSON object containing the corresponding origin keys for the domains.  > If you're still using origin key for your Web Drop-in or Components integration, we recommend [switching to client key](https://docs.adyen.com/development-resources/client-side-authentication/migrate-from-origin-key-to-client-key). This allows you to use a single key for all origins, add or remove origins without generating a new key, and detect the card type from the number entered in your payment form. 

  ## Parameters

  - connection (AdyenCheckoutEx.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :idempotency_key (String.t): A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    - :body (CheckoutUtilityRequest): 
  ## Returns

  {:ok, AdyenCheckoutEx.Model.CheckoutUtilityResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_origin_keys(Tesla.Env.client, keyword()) :: {:ok, AdyenCheckoutEx.Model.CheckoutUtilityResponse.t} | {:ok, AdyenCheckoutEx.Model.ServiceError.t} | {:error, Tesla.Env.t}
  def post_origin_keys(connection, opts \\ []) do
    optional_params = %{
      :"Idempotency-Key" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/originKeys")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenCheckoutEx.Model.CheckoutUtilityResponse{}},
      { 400, %AdyenCheckoutEx.Model.ServiceError{}},
      { 401, %AdyenCheckoutEx.Model.ServiceError{}},
      { 403, %AdyenCheckoutEx.Model.ServiceError{}},
      { 422, %AdyenCheckoutEx.Model.ServiceError{}},
      { 500, %AdyenCheckoutEx.Model.ServiceError{}}
    ])
  end

  @doc """
  Creates a payment link.
  Creates a payment link to our hosted payment form where shoppers can pay. The list of payment methods presented to the shopper depends on the `currency` and `country` parameters sent in the request.  For more information, refer to [Pay by Link documentation](https://docs.adyen.com/online-payments/pay-by-link#create-payment-links-through-api).

  ## Parameters

  - connection (AdyenCheckoutEx.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :idempotency_key (String.t): A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    - :body (CreatePaymentLinkRequest): 
  ## Returns

  {:ok, AdyenCheckoutEx.Model.PaymentLinkResource.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_payment_links(Tesla.Env.client, keyword()) :: {:ok, AdyenCheckoutEx.Model.ServiceError.t} | {:ok, AdyenCheckoutEx.Model.PaymentLinkResource.t} | {:error, Tesla.Env.t}
  def post_payment_links(connection, opts \\ []) do
    optional_params = %{
      :"Idempotency-Key" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/paymentLinks")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenCheckoutEx.Model.PaymentLinkResource{}},
      { 201, %AdyenCheckoutEx.Model.PaymentLinkResource{}},
      { 400, %AdyenCheckoutEx.Model.ServiceError{}},
      { 401, %AdyenCheckoutEx.Model.ServiceError{}},
      { 403, %AdyenCheckoutEx.Model.ServiceError{}},
      { 422, %AdyenCheckoutEx.Model.ServiceError{}},
      { 500, %AdyenCheckoutEx.Model.ServiceError{}}
    ])
  end

  @doc """
  Returns available payment methods.
  Queries the available payment methods for a transaction based on the transaction context (like amount, country, and currency). Besides giving back a list of the available payment methods, the response also returns which input details you need to collect from the shopper (to be submitted to `/payments`).  Although we highly recommend using this endpoint to ensure you are always offering the most up-to-date list of payment methods, its usage is optional. You can, for example, also cache the `/paymentMethods` response and update it once a week.

  ## Parameters

  - connection (AdyenCheckoutEx.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :idempotency_key (String.t): A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    - :body (PaymentMethodsRequest): 
  ## Returns

  {:ok, AdyenCheckoutEx.Model.PaymentMethodsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_payment_methods(Tesla.Env.client, keyword()) :: {:ok, AdyenCheckoutEx.Model.ServiceError.t} | {:ok, AdyenCheckoutEx.Model.PaymentMethodsResponse.t} | {:error, Tesla.Env.t}
  def post_payment_methods(connection, opts \\ []) do
    optional_params = %{
      :"Idempotency-Key" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/paymentMethods")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenCheckoutEx.Model.PaymentMethodsResponse{}},
      { 400, %AdyenCheckoutEx.Model.ServiceError{}},
      { 401, %AdyenCheckoutEx.Model.ServiceError{}},
      { 403, %AdyenCheckoutEx.Model.ServiceError{}},
      { 422, %AdyenCheckoutEx.Model.ServiceError{}},
      { 500, %AdyenCheckoutEx.Model.ServiceError{}}
    ])
  end

  @doc """
  Returns the available balance on gift card.
  Retrieves the balance remaining on a shopper's gift card. To check a gift card's balance, make a POST `/paymentMethods/balance` call and include the gift card's details inside a `paymentMethod` object.

  ## Parameters

  - connection (AdyenCheckoutEx.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :idempotency_key (String.t): A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    - :body (CheckoutBalanceCheckRequest): 
  ## Returns

  {:ok, AdyenCheckoutEx.Model.CheckoutBalanceCheckResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_payment_methods_balance(Tesla.Env.client, keyword()) :: {:ok, AdyenCheckoutEx.Model.ServiceError.t} | {:ok, AdyenCheckoutEx.Model.CheckoutBalanceCheckResponse.t} | {:error, Tesla.Env.t}
  def post_payment_methods_balance(connection, opts \\ []) do
    optional_params = %{
      :"Idempotency-Key" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/paymentMethods/balance")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenCheckoutEx.Model.CheckoutBalanceCheckResponse{}},
      { 400, %AdyenCheckoutEx.Model.ServiceError{}},
      { 401, %AdyenCheckoutEx.Model.ServiceError{}},
      { 403, %AdyenCheckoutEx.Model.ServiceError{}},
      { 422, %AdyenCheckoutEx.Model.ServiceError{}},
      { 500, %AdyenCheckoutEx.Model.ServiceError{}}
    ])
  end

  @doc """
  Creates a payment session.
  Provides the data object that can be used to start the Checkout SDK. To set up the payment, pass its amount, currency, and other required parameters. We use this to optimise the payment flow and perform better risk assessment of the transaction.  For more information, refer to [How it works](https://docs.adyen.com/online-payments#howitworks).

  ## Parameters

  - connection (AdyenCheckoutEx.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :idempotency_key (String.t): A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    - :body (PaymentSetupRequest): 
  ## Returns

  {:ok, AdyenCheckoutEx.Model.PaymentSetupResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_payment_session(Tesla.Env.client, keyword()) :: {:ok, AdyenCheckoutEx.Model.ServiceError.t} | {:ok, AdyenCheckoutEx.Model.PaymentSetupResponse.t} | {:error, Tesla.Env.t}
  def post_payment_session(connection, opts \\ []) do
    optional_params = %{
      :"Idempotency-Key" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/paymentSession")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenCheckoutEx.Model.PaymentSetupResponse{}},
      { 400, %AdyenCheckoutEx.Model.ServiceError{}},
      { 401, %AdyenCheckoutEx.Model.ServiceError{}},
      { 403, %AdyenCheckoutEx.Model.ServiceError{}},
      { 422, %AdyenCheckoutEx.Model.ServiceError{}},
      { 500, %AdyenCheckoutEx.Model.ServiceError{}}
    ])
  end

  @doc """
  Starts a transaction.
  Sends payment parameters (like amount, country, and currency) together with other required input details collected from the shopper. To know more about required parameters for specific payment methods, refer to our [payment method guides](https://docs.adyen.com/payment-methods).  The response depends on the [payment flow](https://docs.adyen.com/payment-methods#payment-flow): * For a direct flow, the response includes a `pspReference` and a `resultCode` with the payment result, for example **Authorised** or **Refused**.  * For a redirect or additional action, the response contains an `action` object. 

  ## Parameters

  - connection (AdyenCheckoutEx.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :idempotency_key (String.t): A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    - :body (PaymentRequest): 
  ## Returns

  {:ok, AdyenCheckoutEx.Model.PaymentResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_payments(Tesla.Env.client, keyword()) :: {:ok, AdyenCheckoutEx.Model.ServiceError.t} | {:ok, AdyenCheckoutEx.Model.PaymentResponse.t} | {:error, Tesla.Env.t}
  def post_payments(connection, opts \\ []) do
    optional_params = %{
      :"Idempotency-Key" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/payments")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenCheckoutEx.Model.PaymentResponse{}},
      { 400, %AdyenCheckoutEx.Model.ServiceError{}},
      { 401, %AdyenCheckoutEx.Model.ServiceError{}},
      { 403, %AdyenCheckoutEx.Model.ServiceError{}},
      { 422, %AdyenCheckoutEx.Model.ServiceError{}},
      { 500, %AdyenCheckoutEx.Model.ServiceError{}}
    ])
  end

  @doc """
  Submits details for a payment.
  Submits details for a payment created using `/payments`. This step is only needed when no final state has been reached on the `/payments` request, for example when the shopper was redirected to another page to complete the payment.  

  ## Parameters

  - connection (AdyenCheckoutEx.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :idempotency_key (String.t): A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    - :body (DetailsRequest): 
  ## Returns

  {:ok, AdyenCheckoutEx.Model.PaymentDetailsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_payments_details(Tesla.Env.client, keyword()) :: {:ok, AdyenCheckoutEx.Model.ServiceError.t} | {:ok, AdyenCheckoutEx.Model.PaymentDetailsResponse.t} | {:error, Tesla.Env.t}
  def post_payments_details(connection, opts \\ []) do
    optional_params = %{
      :"Idempotency-Key" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/payments/details")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenCheckoutEx.Model.PaymentDetailsResponse{}},
      { 400, %AdyenCheckoutEx.Model.ServiceError{}},
      { 401, %AdyenCheckoutEx.Model.ServiceError{}},
      { 403, %AdyenCheckoutEx.Model.ServiceError{}},
      { 422, %AdyenCheckoutEx.Model.ServiceError{}},
      { 500, %AdyenCheckoutEx.Model.ServiceError{}}
    ])
  end

  @doc """
  Verifies payment result.
  Verifies the payment result using the payload returned from the Checkout SDK.  For more information, refer to [How it works](https://docs.adyen.com/online-payments#howitworks).

  ## Parameters

  - connection (AdyenCheckoutEx.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :idempotency_key (String.t): A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    - :body (PaymentVerificationRequest): 
  ## Returns

  {:ok, AdyenCheckoutEx.Model.PaymentVerificationResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_payments_result(Tesla.Env.client, keyword()) :: {:ok, AdyenCheckoutEx.Model.ServiceError.t} | {:ok, AdyenCheckoutEx.Model.PaymentVerificationResponse.t} | {:error, Tesla.Env.t}
  def post_payments_result(connection, opts \\ []) do
    optional_params = %{
      :"Idempotency-Key" => :headers,
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/payments/result")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %AdyenCheckoutEx.Model.PaymentVerificationResponse{}},
      { 400, %AdyenCheckoutEx.Model.ServiceError{}},
      { 401, %AdyenCheckoutEx.Model.ServiceError{}},
      { 403, %AdyenCheckoutEx.Model.ServiceError{}},
      { 422, %AdyenCheckoutEx.Model.ServiceError{}},
      { 500, %AdyenCheckoutEx.Model.ServiceError{}}
    ])
  end
end
